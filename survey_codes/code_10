package jenkins.util;


import hudson.Util;

import java.util.HashMap;

import java.util.Map;


/**

* Utilities to reduce memory footprint

* @author Sam Van Oort

*/

public class MemoryReductionUtil {

/** Returns the capacity we need to allocate for a HashMap so it will hold all elements without needing to resize. */

public static int preallocatedHashmapCapacity(int [MASK] ) {

if ( [MASK] <= 0) {

return 0;

} else if ( [MASK] < 3) {

return [MASK] + 1;

} else {

return [MASK] + [MASK] / 3; // Default load factor is 0.75, so we want to fill that much.

}

}


/** Returns a mutable HashMap presized to hold the given number of elements without needing to resize. */

public static Map getPresizedMutableMap(int elementCount) {

return new HashMap(preallocatedHashmapCapacity(elementCount));

}


/** Empty string array, exactly what it says on the tin. Avoids repeatedly created empty array when calling "toArray." */

public static final String[] EMPTY_STRING_ARRAY = new String[0];


/** Returns the input strings, but with all values interned. */

public static String[] internInPlace(String[] input) {

if (input == null) {

return null;

} else if (input.length == 0) {

return EMPTY_STRING_ARRAY;

}

for (int i = 0; i < input.length; i++) {

input[i] = Util.intern(input[i]);

}

return input;

}


}

