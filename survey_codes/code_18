package org.apache.dubbo.metadata.annotation.processing.builder;


import org.apache.dubbo.metadata.definition.model.TypeDefinition;


import javax.annotation.processing.ProcessingEnvironment;

import javax.lang.model.element.TypeElement;

import javax.lang.model.type.DeclaredType;

import javax.lang.model.type.TypeMirror;

import javax.lang.model.util.Elements;

import javax.lang.model.util.Types;

import java.util.Collection;

import java.util.Map;

import java.util.Objects;


/**

* {@link TypeBuilder} for Java {@link Collection}

*

* @since 2.7.6

*/

public class CollectionTypeDefinitionBuilder implements DeclaredTypeDefinitionBuilder {


@Override

public boolean accept(ProcessingEnvironment processingEnv, DeclaredType type) {

Elements elements = processingEnv.getElementUtils();

TypeElement collectionTypeElement = elements.getTypeElement(Collection.class.getTypeName());

TypeMirror collectionType = collectionTypeElement.asType();

Types types = processingEnv.getTypeUtils();

TypeMirror erasedType = types.erasure(type);

return types.isAssignable(erasedType, collectionType);

}


@Override

public TypeDefinition build(ProcessingEnvironment processingEnv, DeclaredType type, Map<String, TypeDefinition> typeCache) {

String typeName = type.toString();

TypeDefinition [MASK] = new TypeDefinition(typeName);

// Generic Type arguments

type.getTypeArguments()

.stream()

.map(typeArgument -> TypeDefinitionBuilder.build(processingEnv, typeArgument, typeCache)) // build the TypeDefinition from typeArgument

.filter(Objects::nonNull)

.map(TypeDefinition::getType)

.forEach( [MASK] .getItems()::add); // Add into the declared TypeDefinition

return [MASK] ;

}


@Override

public int getPriority() {

return MIN_PRIORITY - 5;

}

}

