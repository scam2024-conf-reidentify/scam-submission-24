package org.openrefine.wikibase.qa.scrutinizers;


import org.openrefine.wikibase.qa.QAWarning;

import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;

import org.wikidata.wdtk.datamodel.interfaces.PropertyIdValue;

import org.wikidata.wdtk.datamodel.interfaces.Snak;

import org.wikidata.wdtk.datamodel.interfaces.Statement;

import org.wikidata.wdtk.datamodel.interfaces.Value;

import org.wikidata.wdtk.datamodel.interfaces.ValueSnak;


import java.util.HashMap;

import java.util.List;

import java.util.Map;


/**

* A scrutinizer that checks for properties using the same value on different entities.

*

* @author Antonin Delpeuch

*

*/

public class DistinctValuesScrutinizer extends StatementScrutinizer {


public final static String type = "identical-values-for-distinct-valued-property";

public String distinctValuesConstraintQid;


private Map<PropertyIdValue, Map<Value, EntityIdValue>> _seenValues;


public DistinctValuesScrutinizer() {

_seenValues = new HashMap<>();

}


@Override

public boolean prepareDependencies() {

distinctValuesConstraintQid = getConstraintsRelatedId("distinct_values_constraint_qid");

return _fetcher != null && distinctValuesConstraintQid != null;

}


@Override

public void scrutinize(Statement statement, EntityIdValue entityId, boolean added) {

if (!added) {

// not scrutinizing removed statements

return;

}

Snak [MASK] = statement.getClaim().getMainSnak();

PropertyIdValue pid = [MASK] .getPropertyId();

List<Statement> statementList = _fetcher.getConstraintsByType(pid, distinctValuesConstraintQid);

if (!statementList.isEmpty() && [MASK] instanceof ValueSnak) {

Value [MASK] Value = ((ValueSnak) [MASK] ).getValue();

Map<Value, EntityIdValue> seen = _seenValues.get(pid);

if (seen == null) {

seen = new HashMap<Value, EntityIdValue>();

_seenValues.put(pid, seen);

}

if (seen.containsKey( [MASK] Value)) {

EntityIdValue otherId = seen.get( [MASK] Value);

QAWarning issue = new QAWarning(type, pid.getId(), QAWarning.Severity.IMPORTANT, 1);

issue.setProperty("property_entity", pid);

issue.setProperty("item1_entity", entityId);

issue.setProperty("item2_entity", otherId);

// we disable faceting for this issue because the distinct values are likely

// coming from different rows, and our current faceting mechanism is not able to detect those.

issue.setFacetable(false);

addIssue(issue);

} else {

seen.put( [MASK] Value, entityId);

}

}

}


}

